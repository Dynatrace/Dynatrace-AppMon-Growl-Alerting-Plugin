/**
 * This template file was generated by dynaTrace client.
 * The dynaTrace community portal can be found here: http://community.dynatrace.com/
 * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
 **/

package com.dynatrace.diagnostics.plugins.growl;

import java.util.Collection;
//import java.util.logging.Logger;

import net.sf.libgrowl.Application;
import net.sf.libgrowl.GrowlConnector;
import net.sf.libgrowl.Notification;
import net.sf.libgrowl.NotificationType;
import net.sf.libgrowl.internal.IPriority;
import net.sf.libgrowl.internal.IResponse;

import com.dynatrace.diagnostics.pdk.Action;
import com.dynatrace.diagnostics.pdk.ActionEnvironment;
import com.dynatrace.diagnostics.pdk.Incident;
import com.dynatrace.diagnostics.pdk.Incident.Severity;
import com.dynatrace.diagnostics.pdk.Status;
import com.dynatrace.diagnostics.pdk.Violation;

public class GrowlAction implements Action {

	public static final String ICON_FORMAT = "png";
	public static final String APPLICATION_ICON = "/res/DATM.png";
	public static final String INFO_ICON        = "/res/DATM_info.png";
	public static final String WARNING_ICON     = "/res/DATM_warning.png";
	public static final String SEVERE_ICON      = "/res/DATM_severe.png";

	private static final String CONFIG_GROWL_HOST = "host";
	private static final String CONFIG_GROWL_URL_CALLBACK = "url";

	//private static final Logger log = Logger.getLogger(GrowlAction.class.getName());

	private GrowlConnector growl;
	private Application dtApp;
	private NotificationType infoType;
	private NotificationType warningType;
	private NotificationType severeType;

	private String host = "localhost";
	private String url = "";

	private final String name = "dynaTrace";
	
	private String title;

	/**
	 * Initializes the Action Plugin. This method is always called before
	 * <tt>execute</tt>. If the returned status is <tt>null</tt> or the status
	 * code is a non-success code then <tt>execute</tt> will not be called.
	 * 
	 * @param env
	 *            the configured <tt>ActionEnvironment</tt> for this Plugin;
	 *            <b>does not contain any incidents</b>
	 * @see Plugin#teardown()
	 * @return a <tt>Status</tt> object that describes the result of the method
	 *         call
	 * @throws Exception
	 */
	public Status setup(ActionEnvironment env) throws Exception {
		Status status = new Status();

		host = env.getConfigString(CONFIG_GROWL_HOST);
		url=env.getConfigString(CONFIG_GROWL_URL_CALLBACK);

		status.setStatusCode(Status.StatusCode.ErrorTargetServiceExecutionFailed);
		if (host.isEmpty()) {
			status.setMessage("host must not be empty !");
		} else {

			// connect to Growl on the given host
			growl = new GrowlConnector(host);

			// give your application a name and icon (optionally)

			dtApp = new Application(name, getClass().getResourceAsStream(APPLICATION_ICON), ICON_FORMAT);

			// create reusable notification types, their names are used in the
			// Growl settings
			infoType = new NotificationType("Info", "Info", getClass().getResourceAsStream(INFO_ICON), ICON_FORMAT);
			warningType = new NotificationType("Warning", "Warning", getClass().getResourceAsStream(WARNING_ICON), ICON_FORMAT);
			severeType = new NotificationType("Severe", "Severe", getClass().getResourceAsStream(SEVERE_ICON), ICON_FORMAT);

			NotificationType[] notificationTypes = new NotificationType[] {	infoType, warningType, severeType };

			// now register the application in growl
			if (growl.register(dtApp, notificationTypes) == IResponse.OK) {
				status.setStatusCode(Status.StatusCode.Success);
			} else {
				status.setMessage(growl.getLastResponse().toString());
			}
		}
		return status;
	}

	/**
	 * Executes the Action Plugin to process incidents.
	 * 
	 * <p>
	 * This method is called at the scheduled intervals, but only if incidents
	 * occurred in the meantime. If the Plugin execution takes longer than the
	 * schedule interval, subsequent calls to
	 * {@link #execute(ActionEnvironment)} will be skipped until this method
	 * returns. After the execution duration exceeds the schedule timeout,
	 * {@link TaskEnvironment#isStopped()} will return <tt>true</tt>. In this
	 * case execution should be stopped as soon as possible. If the Plugin
	 * ignores {@link TaskEnvironment#isStopped()} or fails to stop execution in
	 * a reasonable timeframe, the execution thread will be stopped ungracefully
	 * which might lead to resource leaks!
	 * 
	 * @param env
	 *            a <tt>ActionEnvironment</tt> object that contains the Plugin
	 *            configuration and incidents
	 * @return a <tt>Status</tt> object that describes the result of the method
	 *         call
	 */
	public Status execute(ActionEnvironment env) throws Exception {
		Status status = new Status();
		status.setStatusCode(Status.StatusCode.ErrorTargetServiceExecutionFailed);

		NotificationType type;
		int priority;

		Collection<Incident> incidents = env.getIncidents();
		for (Incident incident : incidents) {

			Severity severity = incident.getSeverity();
			

			title="dynaTrace - "+incident.getServerName();
			
			if (severity.equals(Incident.Severity.Error)) {
				type = severeType;
				priority = IPriority.EMERGENCY;
			} else if (severity.equals(Incident.Severity.Warning)) {
				type = warningType;
				priority = IPriority.HIGH;
			} else {
				type = infoType;
				priority = IPriority.MODERATE;
			}

			String message = incident.getMessage();

			//log.info("Incident " + message + " triggered.");
			for (Violation violation : incident.getViolations()) {
				message+="\n"+violation.getViolatedMeasure().getName();
//				log.info("Measure " + violation.getViolatedMeasure().getName()	+ " violoated threshold.");
			}

			// create a notification with specific title and message

			Notification note = new Notification(dtApp, type, title, message);

			note.setSticky(true);

			note.setPriority(priority);

			note.setCallBackURL(url);

			// finally send the notification
			growl.notify(note);

		}

		status.setStatusCode(Status.StatusCode.Success);

		return status;
	}

	/**
	 * Shuts the Plugin down and frees resources. This method is called either
	 * way if the Action setup/execution has failed or was successful.
	 * 
	 * @see Action#setup(ActionEnvironment)
	 */
	public void teardown(ActionEnvironment env) throws Exception {
	}
}
